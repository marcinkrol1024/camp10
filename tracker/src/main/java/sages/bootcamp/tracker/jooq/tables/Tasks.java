/*
 * This file is generated by jOOQ.
*/
package sages.bootcamp.tracker.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sages.bootcamp.tracker.jooq.Keys;
import sages.bootcamp.tracker.jooq.Public;
import sages.bootcamp.tracker.jooq.enums.TaskStatus;
import sages.bootcamp.tracker.jooq.tables.records.TasksRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = 431998757;

    /**
     * The reference instance of <code>public.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>public.tasks.id</code>.
     */
    public final TableField<TasksRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tasks_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.tasks.title</code>.
     */
    public final TableField<TasksRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.tasks.created</code>.
     */
    public final TableField<TasksRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.tasks.assignee_id</code>.
     */
    public final TableField<TasksRecord, Long> ASSIGNEE_ID = createField("assignee_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tasks.status</code>.
     */
    public final TableField<TasksRecord, TaskStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(sages.bootcamp.tracker.jooq.enums.TaskStatus.class), this, "");

    /**
     * The column <code>public.tasks.project_id</code>.
     */
    public final TableField<TasksRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tasks.parent_id</code>.
     */
    public final TableField<TasksRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.tasks</code> table reference
     */
    public Tasks() {
        this("tasks", null);
    }

    /**
     * Create an aliased <code>public.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(alias, TASKS);
    }

    private Tasks(String alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(String alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TasksRecord, Long> getIdentity() {
        return Keys.IDENTITY_TASKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.TASKS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TasksRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksRecord>>asList(Keys.TASKS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TasksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TasksRecord, ?>>asList(Keys.TASKS__TASKS_ASSIGNEE_ID_FKEY, Keys.TASKS__TASKS_PROJECT_ID_FKEY, Keys.TASKS__TASKS_PARENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tasks as(String alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(name, null);
    }
}
