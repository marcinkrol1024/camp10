/*
 * This file is generated by jOOQ.
*/
package sages.bootcamp.tracker.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import sages.bootcamp.tracker.jooq.Keys;
import sages.bootcamp.tracker.jooq.Public;
import sages.bootcamp.tracker.jooq.tables.records.UserProjectRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserProject extends TableImpl<UserProjectRecord> {

    private static final long serialVersionUID = 1118731134;

    /**
     * The reference instance of <code>public.user_project</code>
     */
    public static final UserProject USER_PROJECT = new UserProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserProjectRecord> getRecordType() {
        return UserProjectRecord.class;
    }

    /**
     * The column <code>public.user_project.user_id</code>.
     */
    public final TableField<UserProjectRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_project.project_id</code>.
     */
    public final TableField<UserProjectRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.user_project</code> table reference
     */
    public UserProject() {
        this("user_project", null);
    }

    /**
     * Create an aliased <code>public.user_project</code> table reference
     */
    public UserProject(String alias) {
        this(alias, USER_PROJECT);
    }

    private UserProject(String alias, Table<UserProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserProject(String alias, Table<UserProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<UserProjectRecord>>asList(Keys.USER_PROJECT_USER_ID_PROJECT_ID_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserProjectRecord, ?>>asList(Keys.USER_PROJECT__USER_PROJECT_USER_ID_FKEY, Keys.USER_PROJECT__USER_PROJECT_PROJECT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserProject as(String alias) {
        return new UserProject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserProject rename(String name) {
        return new UserProject(name, null);
    }
}
